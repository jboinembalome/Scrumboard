import { enableProdMode, APP_ID, importProvidersFrom } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';


import { environment } from './environments/environment';
import { AppComponent } from './app/app.component';
import { FormsModule } from '@angular/forms';
import { ApiModule } from './app/swagger/api.module';
import { LayoutModule } from './app/layout/layout.module';
import { CoreModule } from './app/core/core.module';
import { appRoutes } from './app/app.routing';
import { RouterModule, ExtraOptions, PreloadAllModules } from '@angular/router';
import { provideAnimations } from '@angular/platform-browser/animations';
import { BrowserModule, bootstrapApplication } from '@angular/platform-browser';
import { AuthInterceptor } from 'app/core/auth/interceptors/auth.interceptor';
import { AuthErrorInterceptor } from 'app/core/auth/interceptors/auth-error.interceptor';
import { HTTP_INTERCEPTORS, withInterceptorsFromDi, provideHttpClient } from '@angular/common/http';

const routerConfig: ExtraOptions = {
  preloadingStrategy       : PreloadAllModules,
  scrollPositionRestoration: 'enabled'
};



export function getBaseUrl() {
  // Use slice to remove the last slash in the url.
  // It's useful for path which are generated by SwaggerHub.
  return document.getElementsByTagName('base')[0].href.slice(0, -1);
}

const providers = [
  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }
];

if (environment.production) {
  enableProdMode();
}

bootstrapApplication(AppComponent, {
    providers: [
        importProvidersFrom(BrowserModule, RouterModule.forRoot(appRoutes, routerConfig), 
        // Material module with all import
        //MaterialModule,
        // Core module of the application
        CoreModule, 
        // Layout module of the application
        LayoutModule, 
        // Api module generated by SwaggerHub
        ApiModule, FormsModule),
        { provide: APP_ID, useValue: 'ng-cli-universal' },
        { provide: HTTP_INTERCEPTORS, useClass: AuthErrorInterceptor, multi: true },
        { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },
        provideAnimations(),
        provideHttpClient(withInterceptorsFromDi())
    ]
})
  .catch(err => console.log(err));

//export { renderModule, renderModuleFactory } from '@angular/platform-server';