/**
 * Scrumboard API
 * API for accessing Scrumboard project data.
 *
 * OpenAPI spec version: v1
 * Contact: jboinembaome@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

 import { Inject, Injectable, Optional }                      from '@angular/core';
 import { HttpClient, HttpHeaders, HttpParams,
          HttpResponse, HttpEvent }                           from '@angular/common/http';
 import { CustomHttpUrlEncodingCodec }                        from '../encoder';
 
 import { Observable }                                        from 'rxjs';
 
 import { AdherentDto } from '../model/adherentDto';
 
 import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
 import { Configuration }                                     from '../configuration';
 
 
 @Injectable()
 export class AdherentsService {
 
     protected basePath = '/';
     public defaultHeaders = new HttpHeaders();
     public configuration = new Configuration();
 
     constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
         if (basePath) {
             this.basePath = basePath;
         }
         if (configuration) {
             this.configuration = configuration;
             this.basePath = basePath || configuration.basePath || this.basePath;
         }
     }
 
     /**
      * @param consumes string[] mime-types
      * @return true: consumes contains 'multipart/form-data', false: otherwise
      */
     private canConsumeForm(consumes: string[]): boolean {
         const form = 'multipart/form-data';
         for (const consume of consumes) {
             if (form === consume) {
                 return true;
             }
         }
         return false;
     }
 
 
     /**
      * Get avatar by identity Id of the adherent.
      * 
      * @param identityId Identity Id of the adherent.
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiAdherentsAvatarIdentityIdGet(identityId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
     public apiAdherentsAvatarIdentityIdGet(identityId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
     public apiAdherentsAvatarIdentityIdGet(identityId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
     public apiAdherentsAvatarIdentityIdGet(identityId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (identityId === null || identityId === undefined) {
             throw new Error('Required parameter identityId was null or undefined when calling apiAdherentsAvatarIdentityIdGet.');
         }
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
             headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<any>('get',`${this.basePath}/api/Adherents/avatar/${encodeURIComponent(String(identityId))}`,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Get adherents by team id.
      * 
      * @param teamId Id of the team.
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiAdherentsTeamsTeamIdGet(teamId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<AdherentDto>>;
     public apiAdherentsTeamsTeamIdGet(teamId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AdherentDto>>>;
     public apiAdherentsTeamsTeamIdGet(teamId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AdherentDto>>>;
     public apiAdherentsTeamsTeamIdGet(teamId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (teamId === null || teamId === undefined) {
             throw new Error('Required parameter teamId was null or undefined when calling apiAdherentsTeamsTeamIdGet.');
         }
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
             headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<Array<AdherentDto>>('get',`${this.basePath}/api/Adherents/teams/${encodeURIComponent(String(teamId))}`,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
 }
 